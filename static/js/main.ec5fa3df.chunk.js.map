{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","file","Blob","element","URL","createObjectURL","download","body","appendChild","click","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","data-bs-dismiss","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ec5fa3df.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href= \"#\"> {props.title} </a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href= \"#\">Home</a>\r\n            </li>\r\n            {/*<li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to= \"/about\"> {props.aboutText} </Link>\r\n            </li>*/}\r\n          </ul>\r\n          {/*<form className=\"d-flex\" role=\"search\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-danger\" type=\"submit\">Search</button>\r\n  </form>*/}\r\n          <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked = 'true' id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\"  htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\n/*Navbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    aboutText: 'Set About Here'\r\n}*/\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    //console.log(\"The button is clicked.\")\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    //console.log(\"The button is clicked.\")\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    //console.log(\"The button is clicked.\")\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text has been cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpace = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Space Removed\", \"success\");\r\n  };\r\n\r\n  const handleDloadText = () => {\r\n    const file = new Blob([text], {\r\n        type: 'text/plain'\r\n    })\r\n    const element = document.createElement('a')\r\n    element.href = URL.createObjectURL(file)\r\n    element.download = 'myFile.txt'\r\n    document.body.appendChild(element)\r\n    element.click()\r\n\r\n};\r\n\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Change\")\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"Enter Your Text Here\");\r\n  // text = new text; Wrong Way\r\n  // setText(text) Correct Way\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container my-1\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h3>{props.heading}</h3>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            id=\"myBox\"\r\n            rows=\"12\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#28282B\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n            className=\"form-control\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to UpperCase\r\n        </button>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to LowerCase\r\n        </button>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleCopyClick}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleExtraSpace}\r\n        >\r\n          Remove Extra Space\r\n        </button>\r\n        <button\r\n          className={`btn btn-outline-${\r\n            props.mode === \"dark\" ? \"light\" : \"dark\"\r\n          } mx-1 btn-sm`}\r\n          onClick={handleDloadText}\r\n        >\r\n          Download Your Text\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3 \"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h4> Your Text Summary: </h4>\r\n        <p className=\"line d-inline\">\r\n          {\" \"}\r\n          {text.split(\" \").length} words, {text.length} characters,{\" \"}\r\n        </p>\r\n        <p className=\"line d-inline\">\r\n          {\" \"}\r\n          and {0.008 * text.split(\" \").length} Minutes to Read!\r\n        </p>\r\n\r\n        <h4 className=\"prev my-2\"> Preview: </h4>\r\n        <p>{text.length > 0 ? text : \"Enter Something Above in the Box\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className= {`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\n/*import About from './components/About';*/\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n/*import {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";*/\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextAssist - Light Mode\";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#28282B\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextAssist - Dark Mode\";\n    }\n  };\n\n  return (\n    <>\n      {/*<Router>*/}\n      <Navbar\n        title=\"TextAssist\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-4\">\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Enter Your Text to Analyse Below:\"\n          mode={mode}\n        />\n        {/*<Routes>\n            <Route exact path='/about' element={<About mode={mode} />}></Route>\n            <Route exact path='/' element={<TextForm showAlert={showAlert} heading='Enter Your Text to Analyse Below' mode={mode} />}></Route>\n  </Routes>*/}\n      </div>\n      {/*</Router>*/}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}